export function registerMediaMtxRoutes(ctx) {
  const { app, projects, mediamtxLogs, maxLogs } = ctx;

  // MediaMTX webhook endpoint (GET requests)
  app.get("/api/mediamtx/hook", (req, res) => {
    const {
      MTX_PATH,
      MTX_SOURCE_TYPE,
      MTX_SOURCE_ID,
      MTX_CONN_TYPE,
      MTX_CONN_ID,
      MTX_READER_TYPE,
      MTX_READER_ID,
      MTX_SEGMENT_PATH,
      MTX_SEGMENT_DURATION
    } = process.env;

    const { event } = req.query;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("MediaMTX Hook called with:", {
      query: req.query,
      env: {
        MTX_PATH,
        MTX_SOURCE_TYPE,
        MTX_SOURCE_ID,
        MTX_CONN_TYPE,
        MTX_CONN_ID,
        MTX_READER_TYPE,
        MTX_READER_ID,
        MTX_SEGMENT_PATH,
        MTX_SEGMENT_DURATION
      }
    });

    let logMessage = '';
    let logType = 'info';

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ event –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ server.js)
    switch (event) {
      case 'connect':
        logMessage = `–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É`;
        logType = 'connect';
        break;
      case 'disconnect':
        logMessage = `–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`;
        logType = 'disconnect';
        break;
      case 'stream_ready':
        logMessage = `–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É`;
        logType = 'stream';
        break;
      case 'stream_not_ready':
        logMessage = `–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`;
        logType = 'stream';
        break;
      case 'read_start':
        logMessage = `–ö–ª–∏–µ–Ω—Ç –Ω–∞—á–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏`;
        logType = 'connect';
        break;
      case 'read_stop':
        logMessage = `–ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏`;
        logType = 'disconnect';
        break;
      case 'record_create':
        logMessage = `–°–æ–∑–¥–∞–Ω —Å–µ–≥–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏`;
        logType = 'record';
        break;
      case 'record_complete':
        logMessage = `–ó–∞–≤–µ—Ä—à–µ–Ω —Å–µ–≥–º–µ–Ω—Ç –∑–∞–ø–∏—Å–∏`;
        logType = 'record';
        break;
      default:
        logMessage = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`;
        logType = 'info';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if (logMessage) {
      const logEntry = {
        timestamp: new Date().toISOString(),
        message: logMessage,
        type: logType,
        path: MTX_PATH,
        sourceType: MTX_SOURCE_TYPE,
        connType: MTX_CONN_TYPE,
        event: event
      };
      mediamtxLogs.push(logEntry);

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –ª–æ–≥–æ–≤
      if (mediamtxLogs.length > maxLogs) {
        mediamtxLogs.shift();
      }

      console.log(`üìã ${logMessage}`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è MediaMTX
    res.status(200).send('OK');
  });

  // Status endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  app.get("/api/mediamtx/status", (_req, res) => {
    try {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
      const activeStreams = projects.size; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
      const connectedClients = Array.from(projects.values()).reduce((total, project) => {
        return total + project.listeners.size;
      }, 0);

      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date().toDateString();
      const eventsToday = mediamtxLogs.filter(log => {
        return new Date(log.timestamp).toDateString() === today;
      }).length;

      // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ
      const lastEvent = mediamtxLogs.length > 0
        ? new Date(mediamtxLogs[mediamtxLogs.length - 1].timestamp).toLocaleString('ru-RU')
        : null;

      res.json({
        mediamtx: {
          running: true // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, —Ç–æ MediaMTX —Ä–∞–±–æ—Ç–∞–µ—Ç
        },
        livetranslate: {
          running: true, // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
          uptime: process.uptime()
        },
        metrics: {
          activeStreams,
          connectedClients,
          eventsToday,
          lastEvent
        },
        logs: mediamtxLogs.slice(-20) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' });
    }
  });
}


